输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。


示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[2,7] 或者 [7,2]
示例 2：

输入：nums = [10,26,30,31,47,60], target = 40
输出：[10,30] 或者 [30,10]
 

限制：

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^6

思路：一开始还以为是回溯，写着写着觉得不太对劲，看了眼答案的标题“双指针”...于是赶紧int low int high搞起来；凭自己力量从头到尾完成的一道题：先依次固定low的位置，然后用binary search找high.

solution:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int low = 0;
        //int high = 1;
        int[] result = new int[2];
        while(low < nums.length - 1  && target - nums[low] > nums[low]){
            //System.out.println("hello");
            int high = binarysearch(nums, low+1, target-nums[low]);
            if(high != -1){
                result[0] = nums[low];
                result[1] = nums[high];
                break;
            }
            low++;
        }
        return result;

    }
    public int binarysearch(int[] nums, int start, int target){
        //int start = start;
        //System.out.println(start + " / " + target);
        int end = nums.length - 1;

        while(start <= end){
            int mid = (start + end)/2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] < target){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
            
            
        }
       
        return -1;
        
    }
}
