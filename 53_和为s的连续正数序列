输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。

序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。

 

示例 1：

输入：target = 9
输出：[[2,3,4],[4,5]]
示例 2：

输入：target = 15
输出：[[1,2,3,4,5],[4,5,6],[7,8]]
 

限制：

1 <= target <= 10^5

思路：一开始完全没思路，后来看了眼答案才知道原来不难
solution:
class Solution {
    public int[][] findContinuousSequence(int target) {
        int low = 1;
        int high = 1;//[)
        int sum = 0;
        List<int[]> result = new ArrayList<>();

        while(low <= target/2){
            if(sum < target){
                sum += high;
                high++;
            }else if(sum > target){
                sum -= low;
                low++;
            }else{
                int[] midresult = new int[high-low];
                int index = 0;
                for(int value = low; value < high; value++){
                    midresult[index++] = value;
                }
                result.add(midresult);
                //move
                sum -= low;
                low++;
            }

        }
        return result.toArray(new int[result.size()][]);
    }
}

总结
必须是 result.toArray(new int[result.size()][]);
不能是 result.toArray(new int[][]);
