Description:

写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：
F(0) = 0,   F(1) = 1
F(N) = F(N - 1) + F(N - 2), 其中 N > 1.
斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

leetcode: https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof

思路： dp[n]不是最佳方案，还有dp[3]的解法，只需关注dp[0],dp[1],dp[2]即可。

Solution:
class Solution {
    public int fib(int n) {
        int[] dp = new int[n+1];

        if(n == 0 || n == 1){
            return n;
        }
         dp[0] = 0;
         dp[1] = 1;
         for(int i = 2; i <= n; i++){
             dp[i] = (dp[i-1] %1000000007 ) + (dp[i-2] % 1000000007);
         }

        return dp[n] %1000000007 ;
    }
}

优化版：
class Solution {
public int fib(int n) {
int dp[] = {0,1,1};
if(n < 3){
return dp[n];
}
//动态规划
for(int i = 2; i <= n; i++){
dp[2] = (dp[0] + dp[1])%1000000007;
dp[0] = dp[1]%1000000007;
dp[1] = dp[2]%1000000007;
}
return dp[2];
}
}

=====================================================
优化版空间复杂度从O(N) -> O(3)
时间复杂度都是O(N)
====================================================
总结：
再写一遍还是忘了最佳方案，记住优化的思想！0，1，2当成三个指针。
