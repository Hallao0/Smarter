Description: 
给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。
一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
 

提示：

0 <= num < 231

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



思路： 
1. 动态规划，转移方程：单拎第i个，那么组合个数是dp[i-1], 如果第i个能和i-1个结合 10 <= combine <= 25, 那么组合个数是dp[i-2]. 于是总和,状态转移方程：dp[i] = dp[i-1] + dp[i-2];
2. 同理，可以把dp[n]，优化为三个变量dp[3], 来回轮着复用，而不是占用辣么大的空间

solution1:
class Solution {
    public int translateNum(int num) {
        if(num == 0) return 1;
        String num_str = String.valueOf(num);
    
        int[] dp = new int[1000];//temp
        dp[0] = 1;
        for(int i = 1; i < num_str.length(); i++){
            dp[i] = dp[i-1];
            //if( i == 1) continue;
            String combine = num_str.substring(i - 1, i + 1);
            if(combine.compareTo("25") <= 0 && combine.compareTo("10") >= 0){
                if( i == 1){
                    dp[i] += dp[0];
                    continue;
                }
                dp[i] += dp[i-2];
            }
        }
        return dp[num_str.length()-1];
    }
}

solution2
class Solution {
    public int translateNum(int num) {
        String num_str = String.valueOf(num);
        //System.out.println(num_str.length());
        if(num_str.length() == 1) return 1;

        //int[] dp = new int[3];//temp
        //dp[0] = 1;
        int cur = 1;
        int pre = 0;
        int prepre = 0;
        for(int i = 1; i < num_str.length(); i++){
            //转移
            prepre = pre;
            pre = cur;
            //start
            cur = pre;
            //if( i == 1) continue;
            String combine = num_str.substring(i - 1, i + 1);
            if(combine.compareTo("25") <= 0 && combine.compareTo("10") >= 0){
                if( i == 1){
                    cur += 1;                   
                    continue;
                }
                cur += prepre;

            }
        }
        return cur;
    }
}
