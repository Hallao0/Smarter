Description:

地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？

leetcode: https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/submissions/

思路： 回溯

Solution:
class Solution {
    public int movingCount(int m, int n, int k) {
        
        boolean[][] visited = new boolean[m][n]; 
        return helper(m,0,n,0,k, visited);
    }
    public int helper(int m, int i, int n, int j, int k, boolean[][] visited) {
        if(i < 0 || i >=m || j < 0 || j >=n || !canReach(i, j, k) || visited[i][j]){
            return 0;
        }
        visited[i][j] = true;
        int up = helper(m, i+1, n,j,k,visited);
        int down =  helper(m, i-1, n,j,k,visited);
        int left =  helper(m, i, n,j-1,k,visited);
        int right =  helper(m, i, n,j+1,k,visited);

        return up+down+left+right+1;

    }
    public boolean canReach(int i, int j, int k){
        int sum = 0;
        while(i != 0){
            sum += i%10;
            i = i/10;
        }
        while(j != 0){
            sum += j%10;
            j = j/10;
        }
        if(sum <= k){
            return true;
        }
        return false;
    }
}
=========================================
总结：
1.一开始写成了差不多的模样
2. canReach while()里面居然能写错，要从个位数开始加合
3. 思路是 return up+down+left+right+1; +1是当前位置点， 而不是上面分别up = () + 1, down = () + 1....想清楚就好
4. 需要visited
