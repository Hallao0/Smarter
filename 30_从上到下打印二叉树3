
Description:

一层正序，一层逆序打印。
请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。

leetcode: 
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/

思路： 在上一题的基础上，在mid_result.add增加一个逻辑判断reverse



solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        boolean reverse = true;

        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> mid_result = new ArrayList<>();
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                if(!reverse){
                    mid_result.add(0,node.val);
                }else{
                    mid_result.add(node.val);
                }

                if(node.left != null) queue.offer(node.left);
                if(node.right != null) queue.offer(node.right);

            }
            if(reverse == true){
                reverse = false;
            }else{
                reverse = true;
            }
            result.add(new ArrayList<>(mid_result));
        }
        return result;



    }
}

=====================================
总结
mid_result.add(0,node.val);
============================================
block 1:
          if(reverse == true){
                reverse = false;
            }else{
                reverse = true;
            }
block 2:
          if(reverse == true) reverse = false;
          if(reverse == false) reverse = true;

这俩block的逻辑不是等价的！啊，block2的代码超蠢，因为line 1把reverse置成false了，所以会再进入line2的逻辑判断里，所以if-elseif逻辑要清晰
