题目描述：
统计一个数字在排序数组中出现的次数。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: 2

示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: 0
 

提示：

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums 是一个非递减数组
-109 <= target <= 109

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：快排变体：从找到一个== target的数即返回， 变态成找到第一个 >= target 的数的index。

solution:
class Solution {
    public int search(int[] nums, int target) {
        int len = nums.length;
        if(len == 0 ) return 0;
        if(nums[0] > target || nums[len-1] < target) return 0;
   
        int right = binarysearch(nums, target+1);
        //System.out.println(right);
        int left = binarysearch(nums, target);

        return right - left;

    }
    //找到第一个 >= target的数字的位置
    public int binarysearch(int[] nums, int target){
        if(target > nums[nums.length - 1]){
            return nums.length;
        }
        int i = 0;
        int j = nums.length - 1;

        while(i < j){
            int mid = (i + j)/2;
            if(target <= nums[mid]){
                j = mid;
            }else{
                i = mid + 1;
            }
        }
        return j;

    }
}

其中：
        if(target > nums[nums.length - 1]){
            return nums.length;
        }
是为了解决[2,2] 2 或者[1] 1这种情况的。
