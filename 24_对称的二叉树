Description:

请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。

leetcode: 101
https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/submissions/

思路： 递归循环 每次判断根节点的左右节点是否对称 然后递归判断左右节点的子节点是否对称

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        if(compare(root.left, root.right)){
            return true;
        }else{
            return false;
        }
    }

    public boolean compare(TreeNode left, TreeNode right){
        if(left == null && right == null){
            return true;
        }
        if(left == null || right == null){
            return false;
        }
        
        if(left.val == right.val){
            return compare(left.right, right.left) && compare(left.left, right.right);
        }else{
            return false;
        }
    }
}

总结：与前面二叉树的题类似
