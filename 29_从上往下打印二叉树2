Description:

从上往下打印出二叉树的每个节点，同层节点从左至右打印，且同层节点在一个list里面。

leetcode: https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/submissions/

思路： 层序遍历使用队列 当队列不为空时，将队列尾的节点弹出，并将值添加到list中 然后将左右不为空的节点添加到队列中。其中while（!queue.isEmpty()） 里面要有一个for（i -> queue.size()）的循环，代表层的遍历。

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>>  result = new ArrayList<>();
        if(root == null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            List<Integer> mid_result = new ArrayList<>();
            int size = queue.size();
            for(int i = 0; i < size; i++){
                 TreeNode node = queue.poll();
                 mid_result.add(node.val);
            //tran
            if(node.left != null) queue.offer(node.left);
            if(node.right != null) queue.offer(node.right);

            }     
            result.add(new ArrayList<>(mid_result));
        }
        return result;

    }
}
