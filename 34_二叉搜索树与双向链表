Description:

输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。

leetcode: https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/submissions/

思路： 1.要转换成排序的双向链表，二叉搜索树中序遍历后是有序的 2.按照左根右，先找到最左侧的点，即是双向链表的表头，然后进行处理，使用递归， 
3. 使用helper返回head & tail

solution:
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
    public Node treeToDoublyList(Node root) {
        if(root == null) return null;
        Node[] result = helper(root);
       
        Node head = result[0];
        return head;
    }

    public Node[] helper(Node node){
        
        Node head = node;
        Node tail = node;

        if(node.left != null){
            Node[] left = helper(node.left);
            node.left = left[1];
            left[1].right = node;

            head = left[0];
        }
        if(node.right != null){
            Node[] right = helper(node.right);
            node.right = right[0];
            right[0].left = node;

            tail = right[1];
        }
        Node[] result = new Node[]{head, tail};
        
        return result;

    }
}
==============================================
总结

奇怪的是在leetcode.cn上总是报错空指针，牛客网是可以过的，一模一样的答案，唉，思路会就行
=====================================================
经过自己细心的观察，力客上面题目要求，最后头尾也要链接，所以加上line 97 & line 98就好了，A过，yeyeye
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
    public Node treeToDoublyList(Node root) {
        if(root == null) return null;
        Node[] result = helper(root);
 //       System.out.println("head: "+ result[0].val);
 //       System.out.println("tail: "+ result[1].val);
        result[1].right = result[0];
        result[0].left = result[1];
        return result[0];
        
    }
    //root.val = 2, return [node1, node3] head & tail
    public Node[] helper(Node node){
        Node head = node;
        Node tail = node;
  //      System.out.println(node.val);

        if(node.left != null){
            Node[] left_tree = helper(node.left);

            node.left = left_tree[1];
            left_tree[1].right = node;

            head = left_tree[0];

        }
        if(node.right != null){
            Node[] right_tree = helper(node.right);

            node.right = right_tree[0];
            right_tree[0].left = node;

            tail = right_tree[1];

        }
        Node[] result = new Node[]{head, tail};
        return result;
    }
}
