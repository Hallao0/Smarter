Description:

数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。

leetcode: 169, 229
https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/submissions/

思路： 先获得一个数，如果下一个数跟此数不等，则计数为0，若相等则计数继续+1，如果存在某个数字超过数组数量的一半，则最后循环出来的结果一定是这个数字 有可能不存在，故需要统计这个数字再数组中出现的次数， 若大于nums.length/2则返回该数字，否则返回0

Solution:
class Solution {
    public int majorityElement(int[] nums) {
        if(nums.length == 0 || nums == null) return 0;

        int value = 0;
        int count = 0;
        //找出出现次数最多的数字
        for(int i = 0 ; i < nums.length; i++){
            if(count == 0){
                value = nums[i];
                count = 1;
            }else{
                if(value == nums[i]){
                    count++;
                }else{
                    count--;
                }
            }
        }
        //再确认该数字出现次数超过数组长度一半

        return value;
    }
}
========================================================================================
思路想清楚，怎么写它都是对的
class Solution {
    public int majorityElement(int[] nums) {
        if(nums.length == 1) return nums[0];

        int value = nums[0];
        int count = 1;
        for(int i = 1; i < nums.length; i++){
            if(nums[i] == value){
                count++;
            }else{
                count--;
                if(count == 0){
                    value = nums[i];
                    count = 1;
                }
            }
        }
        return value;

    }
}
