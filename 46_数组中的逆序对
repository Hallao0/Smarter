题目描述：在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。

 

示例 1:

输入: [7,5,6,4]
输出: 5
 

限制：

0 <= 数组长度 <= 50000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：一个归并排序打底，加一行统计count += mid - i + 1, 即可。一开始想不明白为啥 count += mid - i + 1 而不是count += j - i + 1, 举个例子即可：

left: 1 3 5   right: 2 4 6

因为left & right 部分都是sorted的了，所以当判断到 3  >  2的时候，那么可以确定3 之后，到mid，的数都必然大于2，那么逆序对的个数就是count += mid - i + 1； 过了mid之后，到了right部分，就不一定
是逆序对了。

solution:
class Solution {
    int count = 0;
    public int reversePairs(int[] nums) {
        if(nums.length <= 1) return 0;
        this.count = 0;
        int[] tmp = new int[nums.length];
        sort(nums, 0, nums.length - 1, tmp );
        return count;
    }

    public void sort(int[] nums, int left, int right, int[] tmp){
        if(left < right){
            int mid = (left + right) / 2;
            sort(nums, left, mid, tmp);
            sort(nums, mid+1, right, tmp);

            merge(nums, left, mid, right, tmp);
        }
    }

    public void merge(int[] nums, int left, int mid, int right, int[] tmp){
        int i = left;
        int j = mid + 1;
        int t = 0;
        while(i <= mid && j <= right){
            if(nums[i] <= nums[j]){
                tmp[t++] = nums[i++];
            }else{
                count += (mid - i + 1);
                tmp[t++] = nums[j++];
            }

        }
        while(i <= mid){
            tmp[t++] = nums[i++];
        }
        while(j <= right){
            tmp[t++] = nums[j++];
        }
        t = 0;
        while(left <= right){
            nums[left++] = tmp[t++];
        }

    }
}

注意啥时候left < right, 啥时候
