描述：
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

 

示例 1：

输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true


leetcode:https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/

思路：回溯


Solution:

class Solution {
    public boolean exist(char[][] board, String word) {
        if(board.length == 0 || board[0].length == 0){
            return false;
        }
        boolean[][] visited = new boolean[board.length][board[0].length];
        int rows = board.length;
        int cols = board[0].length;

       
        // 从二维数组的任何一处为起点
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
            // 二维数组，行数，列数，当前行坐标，当前列坐标，要匹配的字符串数组，当前访问到的要匹配的字符串数组的索引，标志二维数组是否已被访问
            if (helper(board, rows, cols, row, col, word, 0, visited)) {
                return true;
            }
        }
    }

    return false;
        

    }
    public boolean helper(char[][] board,int rows, int cols,int row, int col, String word, int index_word, boolean[][] visited){
        //停止尝试的条件 false/true
        if(row >= rows || row < 0 || col >= cols || col < 0 || visited[row][col] == true || board[row][col] != word.charAt(index_word)){
            return false;
        }
        if(index_word == word.length()-1){
            return true;
        }
        visited[row][col] = true;
        boolean result = helper(board, rows, cols, row+1, col, word, index_word+1,visited) || helper(board, rows, cols, row-1, col, word, index_word+1,visited) || helper(board, rows, cols, row, col+1, word, index_word+1, visited) || helper(board, rows, cols, row, col-1, word, index_word+1, visited);
        visited[row][col] = false;
        return result;
    }
}

=====================================================================================

总结：
想到了用回溯的思想：上下左右试错，以及visited[][]。
但是回溯的模板还是没背下来，忘记了for循环
想清楚回溯停止试探的条件：
越界或者字符串不匹配： return false
全部匹配完： return true
