题目描述：
给定一棵二叉搜索树，请找出其中第k大的节点。

 

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 4
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 4
 

限制：

1 ≤ k ≤ 二叉搜索树元素个数

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：
1. right, root, left, 带一个list, list.size == k,则退出迭代，返回list最后一个值
2. 优化，不需要list存储，用一个res存储，随着k-- 更新res即可

solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int res;
    int k;
    public int kthLargest(TreeNode root, int k) {
        //right, root, left, 带一个list, list.size == k,则退出迭代，返回list最后一个值
        //优化，不需要list存储，用一个res存储，随着k-- 更新res即可
        if(root == null) return 0;
        this.k = k;
        dfs(root);
        return res;

    }
    public void dfs(TreeNode root){
        if(root == null) return;
        dfs(root.right);
        if(k == 0) return;
        k--;
        if(k == 0){
            res = root.val;
        }
        dfs(root.left);
    
    }
}
