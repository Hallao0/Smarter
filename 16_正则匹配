描述：
请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。

示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。

leetcode: https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof

思路： 动态规划，dp转移方程分case写：

1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];
2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
3, If p.charAt(j) == ‘*’:
here are two sub conditions:
	1   if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a only counts as empty
	2   if p.charAt(j-1) == s.charAt(i) or p.charAt(j-1) == '.':
		dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a
		or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a
		or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty


其中，3.1情况可以考虑case:
s : #####a(i)
 p: ####b*(j)
当i指向a， j指向*的时候，当前结果应该是看dp[i][j-2],查看j前两步。

3.2 的三个sub cases 是考虑到三种可能,( 注意审题 '*' Matches zero or more of the preceding element.)。
s,p 上下位置要对着看哦。
• 3.2.1 (j+1 < i)
s : #####a(i)
p: ##a*(j)

• 3.2.2 (j + 1 == i)
s : #####a(i)
p: #####a*(j)

• 3.2.3 (j + 1 > i)
s : #####a(i)
p: ########a*(j)
