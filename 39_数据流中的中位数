Description:

如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
例如，

[2,3,4] 的中位数是 3

[2,3] 的中位数是 (2 + 3) / 2 = 2.5

设计一个支持以下两种操作的数据结构：

void addNum(int num) - 从数据流中添加一个整数到数据结构中。
double findMedian() - 返回目前所有元素的中位数。

leetcode: https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/

思路：一个大顶堆（排序后的前半部小数字），一个小顶堆（排序后的后半部大数字），每次插入要调整堆结构，最后返回的是maxheap的max, minheap的min, (max + min)/2, 如果是奇数个，就返回minheap的min.
比如maxheap[1,2,4], minheap[5,6,7], add num=3.

solution:
class MedianFinder {

    /** initialize your data structure here. */
    PriorityQueue<Integer> minheap = new PriorityQueue<Integer>();//小顶堆，默认容量为11
    PriorityQueue<Integer> maxheap = new PriorityQueue<Integer>(11, new Comparator<Integer>(){
            public int compare(Integer i1, Integer i2){
                return i2-i1;
            }
        });
    public MedianFinder() {
        

    }
    
    public void addNum(int num) {
        if(((minheap.size() + maxheap.size()) &1) == 0){//偶数时,下个数字加入小顶堆
            if(!maxheap.isEmpty() && maxheap.peek()>num){
                maxheap.offer(num);
                num = maxheap.poll();
            }
            minheap.offer(num);
        }else{//奇数时，下一个数字放入大顶堆
            if(!minheap.isEmpty() && minheap.peek() < num){
                minheap.offer(num);
                num = minheap.poll();
            }
            maxheap.offer(num);
        }

    }
    
    public double findMedian() {
       double median;
        if((minheap.size()+maxheap.size()&1)==0){
            median=(maxheap.peek()+minheap.peek())/2.0;
        }else{
            median=minheap.peek();
        }
        return median;

    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
 
 总结：想法我居然想到了！注意java 大顶堆，小顶堆的实现
============================================================================
大顶堆是树的Root比左子树根大，比右子树根大，root是max
小顶堆是树的Root比左子树根小，比右子树根小，root是min
